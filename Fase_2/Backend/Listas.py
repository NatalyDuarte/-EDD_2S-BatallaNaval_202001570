# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _Listas
else:
    import _Listas

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class Usuario(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    nick = property(_Listas.Usuario_nick_get, _Listas.Usuario_nick_set)
    passw = property(_Listas.Usuario_passw_get, _Listas.Usuario_passw_set)
    mon = property(_Listas.Usuario_mon_get, _Listas.Usuario_mon_set)
    id = property(_Listas.Usuario_id_get, _Listas.Usuario_id_set)
    edad = property(_Listas.Usuario_edad_get, _Listas.Usuario_edad_set)
    siguiente = property(_Listas.Usuario_siguiente_get, _Listas.Usuario_siguiente_set)
    anterior = property(_Listas.Usuario_anterior_get, _Listas.Usuario_anterior_set)

    def __init__(self, id, nick, passw, mon, edad):
        _Listas.Usuario_swiginit(self, _Listas.new_Usuario(id, nick, passw, mon, edad))
    __swig_destroy__ = _Listas.delete_Usuario

# Register Usuario in _Listas:
_Listas.Usuario_swigregister(Usuario)
cvar = _Listas.cvar

class ListaUsuarios(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _Listas.ListaUsuarios_swiginit(self, _Listas.new_ListaUsuarios())

    def agregarlista(self, id, nick, passw, mon, edad):
        return _Listas.ListaUsuarios_agregarlista(self, id, nick, passw, mon, edad)

    def obtener(self):
        return _Listas.ListaUsuarios_obtener(self)

    def mostrarlista(self):
        return _Listas.ListaUsuarios_mostrarlista(self)

    def verificar(self, nic, passw):
        return _Listas.ListaUsuarios_verificar(self, nic, passw)

    def editar(self, res, nick, passw, edad):
        return _Listas.ListaUsuarios_editar(self, res, nick, passw, edad)

    def eliminar(self, UsuarioBuscado):
        return _Listas.ListaUsuarios_eliminar(self, UsuarioBuscado)

    def obtemonedas(self, nic, passw):
        return _Listas.ListaUsuarios_obtemonedas(self, nic, passw)

    def obtedad(self, nic, passw):
        return _Listas.ListaUsuarios_obtedad(self, nic, passw)

    def ordeanamiento(self):
        return _Listas.ListaUsuarios_ordeanamiento(self)
    __swig_destroy__ = _Listas.delete_ListaUsuarios

# Register ListaUsuarios in _Listas:
_Listas.ListaUsuarios_swigregister(ListaUsuarios)

class Usu(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    id = property(_Listas.Usu_id_get, _Listas.Usu_id_set)
    siguiente = property(_Listas.Usu_siguiente_get, _Listas.Usu_siguiente_set)
    anterior = property(_Listas.Usu_anterior_get, _Listas.Usu_anterior_set)
    derecha = property(_Listas.Usu_derecha_get, _Listas.Usu_derecha_set)
    izquierda = property(_Listas.Usu_izquierda_get, _Listas.Usu_izquierda_set)

    def __init__(self, valor):
        _Listas.Usu_swiginit(self, _Listas.new_Usu(valor))
    __swig_destroy__ = _Listas.delete_Usu

# Register Usu in _Listas:
_Listas.Usu_swigregister(Usu)

class ArbolB(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    OrdenAr = property(_Listas.ArbolB_OrdenAr_get, _Listas.ArbolB_OrdenAr_set)
    raiz = property(_Listas.ArbolB_raiz_get, _Listas.ArbolB_raiz_set)

    def __init__(self):
        _Listas.ArbolB_swiginit(self, _Listas.new_ArbolB())

    def Insertar(self, id):
        return _Listas.ArbolB_Insertar(self, id)

    def InsertarRama(self, nodo, rama):
        return _Listas.ArbolB_InsertarRama(self, nodo, rama)

    def Divi(self, rama):
        return _Listas.ArbolB_Divi(self, rama)

    def InsertarInRama(self, primero, nuevo):
        return _Listas.ArbolB_InsertarInRama(self, primero, nuevo)

    def Hoja(self, primero):
        return _Listas.ArbolB_Hoja(self, primero)

    def Conta(self, primero):
        return _Listas.ArbolB_Conta(self, primero)

    def Grafo(self):
        return _Listas.ArbolB_Grafo(self)

    def GrafoArb(self, rama):
        return _Listas.ArbolB_GrafoArb(self, rama)

    def Ramitas(self, rama):
        return _Listas.ArbolB_Ramitas(self, rama)

    def ConeRamas(self, rama):
        return _Listas.ArbolB_ConeRamas(self, rama)
    __swig_destroy__ = _Listas.delete_ArbolB

# Register ArbolB in _Listas:
_Listas.ArbolB_swigregister(ArbolB)

class Tutorial(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ancho = property(_Listas.Tutorial_ancho_get, _Listas.Tutorial_ancho_set)
    alto = property(_Listas.Tutorial_alto_get, _Listas.Tutorial_alto_set)
    indi = property(_Listas.Tutorial_indi_get, _Listas.Tutorial_indi_set)
    siguiente = property(_Listas.Tutorial_siguiente_get, _Listas.Tutorial_siguiente_set)

    def __init__(self, ancho, alto, indi):
        _Listas.Tutorial_swiginit(self, _Listas.new_Tutorial(ancho, alto, indi))
    __swig_destroy__ = _Listas.delete_Tutorial

# Register Tutorial in _Listas:
_Listas.Tutorial_swigregister(Tutorial)

class ColaTutorial(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _Listas.ColaTutorial_swiginit(self, _Listas.new_ColaTutorial())

    def insertar(self, x, y, indi):
        return _Listas.ColaTutorial_insertar(self, x, y, indi)

    def eliminar(self):
        return _Listas.ColaTutorial_eliminar(self)

    def mostrar(self):
        return _Listas.ColaTutorial_mostrar(self)

    def graficar(self):
        return _Listas.ColaTutorial_graficar(self)
    __swig_destroy__ = _Listas.delete_ColaTutorial

# Register ColaTutorial in _Listas:
_Listas.ColaTutorial_swigregister(ColaTutorial)

class Movimientos(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    coordeX = property(_Listas.Movimientos_coordeX_get, _Listas.Movimientos_coordeX_set)
    coordeY = property(_Listas.Movimientos_coordeY_get, _Listas.Movimientos_coordeY_set)
    siguiente = property(_Listas.Movimientos_siguiente_get, _Listas.Movimientos_siguiente_set)
    anterior = property(_Listas.Movimientos_anterior_get, _Listas.Movimientos_anterior_set)

    def __init__(self, coordeX, coordeY):
        _Listas.Movimientos_swiginit(self, _Listas.new_Movimientos(coordeX, coordeY))
    __swig_destroy__ = _Listas.delete_Movimientos

# Register Movimientos in _Listas:
_Listas.Movimientos_swigregister(Movimientos)

class PilaMovimientos(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _Listas.PilaMovimientos_swiginit(self, _Listas.new_PilaMovimientos())

    def insertar(self, coordeX, coordeY):
        return _Listas.PilaMovimientos_insertar(self, coordeX, coordeY)

    def mostrar(self):
        return _Listas.PilaMovimientos_mostrar(self)

    def graficar(self):
        return _Listas.PilaMovimientos_graficar(self)
    __swig_destroy__ = _Listas.delete_PilaMovimientos

# Register PilaMovimientos in _Listas:
_Listas.PilaMovimientos_swigregister(PilaMovimientos)

class ListaMovimientos(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _Listas.ListaMovimientos_swiginit(self, _Listas.new_ListaMovimientos())

    def agregar(self):
        return _Listas.ListaMovimientos_agregar(self)
    __swig_destroy__ = _Listas.delete_ListaMovimientos

# Register ListaMovimientos in _Listas:
_Listas.ListaMovimientos_swigregister(ListaMovimientos)

class Articulo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    nombre = property(_Listas.Articulo_nombre_get, _Listas.Articulo_nombre_set)
    src = property(_Listas.Articulo_src_get, _Listas.Articulo_src_set)
    id = property(_Listas.Articulo_id_get, _Listas.Articulo_id_set)
    precio = property(_Listas.Articulo_precio_get, _Listas.Articulo_precio_set)
    abajo = property(_Listas.Articulo_abajo_get, _Listas.Articulo_abajo_set)

    def __init__(self, id, precio, nombre, src):
        _Listas.Articulo_swiginit(self, _Listas.new_Articulo(id, precio, nombre, src))
    __swig_destroy__ = _Listas.delete_Articulo

# Register Articulo in _Listas:
_Listas.Articulo_swigregister(Articulo)

class Categoria(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    dato = property(_Listas.Categoria_dato_get, _Listas.Categoria_dato_set)
    siguiente = property(_Listas.Categoria_siguiente_get, _Listas.Categoria_siguiente_set)
    abajo = property(_Listas.Categoria_abajo_get, _Listas.Categoria_abajo_set)

    def __init__(self, dato):
        _Listas.Categoria_swiginit(self, _Listas.new_Categoria(dato))
    __swig_destroy__ = _Listas.delete_Categoria

# Register Categoria in _Listas:
_Listas.Categoria_swigregister(Categoria)

class ListaCategoria(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    inicio = property(_Listas.ListaCategoria_inicio_get, _Listas.ListaCategoria_inicio_set)
    fin = property(_Listas.ListaCategoria_fin_get, _Listas.ListaCategoria_fin_set)
    cabecera = property(_Listas.ListaCategoria_cabecera_get, _Listas.ListaCategoria_cabecera_set)

    def __init__(self):
        _Listas.ListaCategoria_swiginit(self, _Listas.new_ListaCategoria())

    def agregarCate(self, dato):
        return _Listas.ListaCategoria_agregarCate(self, dato)

    def mostrarCate(self):
        return _Listas.ListaCategoria_mostrarCate(self)

    def getCate(self, dato):
        return _Listas.ListaCategoria_getCate(self, dato)

    def agregarArti(self, id, categoria, precio, nom, src):
        return _Listas.ListaCategoria_agregarArti(self, id, categoria, precio, nom, src)

    def mostrarArti(self):
        return _Listas.ListaCategoria_mostrarArti(self)

    def canti(self):
        return _Listas.ListaCategoria_canti(self)

    def getPrecio(self, id):
        return _Listas.ListaCategoria_getPrecio(self, id)

    def graficarListas(self):
        return _Listas.ListaCategoria_graficarListas(self)
    __swig_destroy__ = _Listas.delete_ListaCategoria

# Register ListaCategoria in _Listas:
_Listas.ListaCategoria_swigregister(ListaCategoria)

class Compra(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    id = property(_Listas.Compra_id_get, _Listas.Compra_id_set)
    altura = property(_Listas.Compra_altura_get, _Listas.Compra_altura_set)
    nombre = property(_Listas.Compra_nombre_get, _Listas.Compra_nombre_set)
    cantidad = property(_Listas.Compra_cantidad_get, _Listas.Compra_cantidad_set)
    derecha = property(_Listas.Compra_derecha_get, _Listas.Compra_derecha_set)
    izquierda = property(_Listas.Compra_izquierda_get, _Listas.Compra_izquierda_set)

    def __init__(self, id, nombre, cantidad):
        _Listas.Compra_swiginit(self, _Listas.new_Compra(id, nombre, cantidad))

    def textoGraphviz(self):
        return _Listas.Compra_textoGraphviz(self)
    __swig_destroy__ = _Listas.delete_Compra

# Register Compra in _Listas:
_Listas.Compra_swigregister(Compra)

class ArbolAvl(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _Listas.ArbolAvl_swiginit(self, _Listas.new_ArbolAvl())

    def ObtenerRaiz(self):
        return _Listas.ArbolAvl_ObtenerRaiz(self)

    def Buscar(self, id, nodo):
        return _Listas.ArbolAvl_Buscar(self, id, nodo)

    def ObtenerAlt(self, nodo):
        return _Listas.ArbolAvl_ObtenerAlt(self, nodo)

    def RotaIzqui(self, nodo):
        return _Listas.ArbolAvl_RotaIzqui(self, nodo)

    def RotaDere(self, nodo):
        return _Listas.ArbolAvl_RotaDere(self, nodo)

    def RotaDobleIzq(self, nodo):
        return _Listas.ArbolAvl_RotaDobleIzq(self, nodo)

    def RotaDobleDere(self, nodo):
        return _Listas.ArbolAvl_RotaDobleDere(self, nodo)

    def InsertarAvl(self, nuevo, subAr):
        return _Listas.ArbolAvl_InsertarAvl(self, nuevo, subAr)

    def Insertar(self, dato, nombre, cantidad):
        return _Listas.ArbolAvl_Insertar(self, dato, nombre, cantidad)

    def PreOrden(self, nodo):
        return _Listas.ArbolAvl_PreOrden(self, nodo)

    def CrearGrafica(self, nombre):
        return _Listas.ArbolAvl_CrearGrafica(self, nombre)
    __swig_destroy__ = _Listas.delete_ArbolAvl

# Register ArbolAvl in _Listas:
_Listas.ArbolAvl_swigregister(ArbolAvl)



