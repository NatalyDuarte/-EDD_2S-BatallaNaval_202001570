# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _ListaUsuario
else:
    import _ListaUsuario

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class ListaUsuario(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ListaUsuario.ListaUsuario_swiginit(self, _ListaUsuario.new_ListaUsuario())

    def agregarlista(self, id, nick, _pass, mon, edad):
        return _ListaUsuario.ListaUsuario_agregarlista(self, id, nick, _pass, mon, edad)

    def obtener(self):
        return _ListaUsuario.ListaUsuario_obtener(self)

    def mostrarlista(self):
        return _ListaUsuario.ListaUsuario_mostrarlista(self)

    def verificar(self, nick, _pass):
        return _ListaUsuario.ListaUsuario_verificar(self, nick, _pass)

    def editar(self, res, nick, _pass, mon, edad):
        return _ListaUsuario.ListaUsuario_editar(self, res, nick, _pass, mon, edad)

    def eliminar(self, res):
        return _ListaUsuario.ListaUsuario_eliminar(self, res)

    def encriptar(self, _pass):
        return _ListaUsuario.ListaUsuario_encriptar(self, _pass)

    def obtemonedas(self, res, _pass):
        return _ListaUsuario.ListaUsuario_obtemonedas(self, res, _pass)

    def obtedad(self, res, _pass):
        return _ListaUsuario.ListaUsuario_obtedad(self, res, _pass)

    def agregarmovipila(self):
        return _ListaUsuario.ListaUsuario_agregarmovipila(self)

    def ordeascen(self):
        return _ListaUsuario.ListaUsuario_ordeascen(self)

    def ordedescen(self):
        return _ListaUsuario.ListaUsuario_ordedescen(self)

    def graficadoble(self):
        return _ListaUsuario.ListaUsuario_graficadoble(self)
    __swig_destroy__ = _ListaUsuario.delete_ListaUsuario

# Register ListaUsuario in _ListaUsuario:
_ListaUsuario.ListaUsuario_swigregister(ListaUsuario)



